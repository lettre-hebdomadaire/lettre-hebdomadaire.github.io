---
import fs from "fs";
import LH_lang from "../../../layouts/LH_lang.astro";

export async function getStaticPaths() {
    const articles = await Astro.glob("/LH/**/*.(mdx|md)");
    const listLhs = fs.readdirSync("LH/").filter((lh) => lh.startsWith("LH"));
    let routes = [];
    for (const lhName of listLhs) {
        const listLangs = fs.readdirSync(`LH/${lhName}/`);
        for (const oneLang of listLangs) {
            if (oneLang.includes(".")) {
                continue;
            }
            const listLhs = fs.readdirSync(`LH/${lhName}/${oneLang}/`);
            for (const oneArticle of listLhs) {
                const goodArticle = articles.find((e) => {
                    return e.file.includes(`/LH/${lhName}/${oneLang}/${oneArticle}`);
                });
                if (goodArticle) {
                    const path = goodArticle.file.split("/").pop().split(".").slice(0, -1).join(".");
                    const imagePath = goodArticle?.frontmatter?.coverimage;
                    routes.push({
                        params: { lh: lhName, path: path, lang: oneLang },
                        props: {
                            currentLh: goodArticle.Content,
                            coverimage: imagePath && `/${lhName}/${imagePath}`,
                            ...goodArticle?.frontmatter,
                        },
                    });
                }
            }
        }
    }

    return routes;
}

const { lh, lang, path } = Astro.params;
const { currentLh: Content, title, subtitle, coverimage, author, pubDate, use_math, tags = [] } = Astro.props;

const pageTitle = `${title || ""} - ${lh}`;
---

<LH_lang lang={lang} title={pageTitle} use_math={use_math}>
    {coverimage && <img src={coverimage} style="width:100%;" height="auto" />}
    <h1>{title}</h1>
    <h2>{subtitle}</h2>
    {
        tags.length > 0 && (
            <div>
                <span>tags: </span>
                {tags.map((oneTag) => {
                    return (
                        <a href={`/tagged/${oneTag}`}>
                            <span class="badge">{oneTag}</span>
                        </a>
                    );
                })}
            </div>
        )
    }
    <p style="font-size: smaller;">
        <i>
            {author && <>Par {author} </>}
        </i>
        {
            pubDate && (
                <>
                    {lang === "fr" ? "Le " : "On "}{" "}
                    {new Date(pubDate).toLocaleDateString(lang == "fr" ? "fr-FR" : "en-EN", {
                        year: "numeric",
                        month: "long",
                        day: "numeric",
                    })}{" "}
                    <> </>
                </>
            )
        }
        <Content />
    </p>
</LH_lang>

<style>
    .badge {
        background-color: lightblue;
        color: black;
        padding: 0.2em;
        margin: 0.2em;
        border-radius: 0.5em;
        display: inline-block;
        cursor: pointer;
    }
</style>
