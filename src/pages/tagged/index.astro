---
import fs from "fs";
import LH_lang from "../../layouts/LH_lang.astro";

async function get() {
    const articles = await Astro.glob("/LH/**/*.(mdx|md)");
    const listLhs = fs.readdirSync("LH/").filter((lh) => lh.startsWith("LH"));
    let taggedArticles = [];
    for (const lhName of listLhs) {
        const listLangs = fs.readdirSync(`LH/${lhName}/`);
        for (const oneLang of listLangs) {
            if (oneLang.includes(".")) {
                continue;
            }
            const listLhs = fs.readdirSync(`LH/${lhName}/${oneLang}/`);
            for (const oneArticle of listLhs) {
                const goodArticle = articles.find((e) => {
                    return e.file.includes(`/LH/${lhName}/${oneLang}/${oneArticle}`);
                });
                if (goodArticle) {
                    for (const oneTag of goodArticle?.frontmatter?.tags || []) {
                        taggedArticles.push({
                            params: { tag: oneTag },
                            props: {
                                lh: lhName,
                                lang: oneLang,
                                article: oneArticle,
                                title: goodArticle?.frontmatter?.title,
                            },
                        });
                    }
                }
            }
        }
    }
    const goodArticles = taggedArticles.reduce((previousValue, currentValue) => {
        return {
            ...previousValue,
            [currentValue.params.tag]: [...(previousValue[currentValue.params.tag] || []), currentValue.props],
        };
    }, {});

    return goodArticles;
}
const res = await get();
---

<LH_lang>
    <p>Tags:</p>
    {
        Object.entries(res).map(([tag, article]) => {
            return (
                <a href={`/tagged/${tag}`}>
                    <p>
                        <span class="badge">{`${tag}`}</span> ({article.length})
                    </p>
                </a>
            );
        })
    }
</LH_lang>
